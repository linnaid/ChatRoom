// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_chat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_user_5fchat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_user_5fchat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_user_5fchat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_user_5fchat_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_user_5fchat_2eproto;
namespace chat {
class ChatMessage;
struct ChatMessageDefaultTypeInternal;
extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
class GroupChatMessage;
struct GroupChatMessageDefaultTypeInternal;
extern GroupChatMessageDefaultTypeInternal _GroupChatMessage_default_instance_;
class GroupNotification;
struct GroupNotificationDefaultTypeInternal;
extern GroupNotificationDefaultTypeInternal _GroupNotification_default_instance_;
}  // namespace chat
PROTOBUF_NAMESPACE_OPEN
template<> ::chat::ChatMessage* Arena::CreateMaybeMessage<::chat::ChatMessage>(Arena*);
template<> ::chat::GroupChatMessage* Arena::CreateMaybeMessage<::chat::GroupChatMessage>(Arena*);
template<> ::chat::GroupNotification* Arena::CreateMaybeMessage<::chat::GroupNotification>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chat {

// ===================================================================

class ChatMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ChatMessage) */ {
 public:
  inline ChatMessage() : ChatMessage(nullptr) {}
  ~ChatMessage() override;
  explicit PROTOBUF_CONSTEXPR ChatMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatMessage(const ChatMessage& from);
  ChatMessage(ChatMessage&& from) noexcept
    : ChatMessage() {
    *this = ::std::move(from);
  }

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatMessage* internal_default_instance() {
    return reinterpret_cast<const ChatMessage*>(
               &_ChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChatMessage& a, ChatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChatMessage& from) {
    ChatMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ChatMessage";
  }
  protected:
  explicit ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromNameFieldNumber = 1,
    kToNameFieldNumber = 2,
    kMessageFieldNumber = 3,
    kTimeFieldNumber = 4,
  };
  // string from_name = 1;
  void clear_from_name();
  const std::string& from_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from_name();
  PROTOBUF_NODISCARD std::string* release_from_name();
  void set_allocated_from_name(std::string* from_name);
  private:
  const std::string& _internal_from_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from_name(const std::string& value);
  std::string* _internal_mutable_from_name();
  public:

  // string to_name = 2;
  void clear_to_name();
  const std::string& to_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_name();
  PROTOBUF_NODISCARD std::string* release_to_name();
  void set_allocated_to_name(std::string* to_name);
  private:
  const std::string& _internal_to_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_name(const std::string& value);
  std::string* _internal_mutable_to_name();
  public:

  // string message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string time = 4;
  void clear_time();
  const std::string& time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_time();
  PROTOBUF_NODISCARD std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // @@protoc_insertion_point(class_scope:chat.ChatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_5fchat_2eproto;
};
// -------------------------------------------------------------------

class GroupChatMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.GroupChatMessage) */ {
 public:
  inline GroupChatMessage() : GroupChatMessage(nullptr) {}
  ~GroupChatMessage() override;
  explicit PROTOBUF_CONSTEXPR GroupChatMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupChatMessage(const GroupChatMessage& from);
  GroupChatMessage(GroupChatMessage&& from) noexcept
    : GroupChatMessage() {
    *this = ::std::move(from);
  }

  inline GroupChatMessage& operator=(const GroupChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupChatMessage& operator=(GroupChatMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupChatMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupChatMessage* internal_default_instance() {
    return reinterpret_cast<const GroupChatMessage*>(
               &_GroupChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GroupChatMessage& a, GroupChatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupChatMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupChatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupChatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupChatMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupChatMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupChatMessage& from) {
    GroupChatMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupChatMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.GroupChatMessage";
  }
  protected:
  explicit GroupChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupNameFieldNumber = 1,
    kFromMemberFieldNumber = 2,
    kMessageFieldNumber = 3,
    kTineFieldNumber = 4,
  };
  // string group_name = 1;
  void clear_group_name();
  const std::string& group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_name();
  PROTOBUF_NODISCARD std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // string from_member = 2;
  void clear_from_member();
  const std::string& from_member() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from_member(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from_member();
  PROTOBUF_NODISCARD std::string* release_from_member();
  void set_allocated_from_member(std::string* from_member);
  private:
  const std::string& _internal_from_member() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from_member(const std::string& value);
  std::string* _internal_mutable_from_member();
  public:

  // string message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string tine = 4;
  void clear_tine();
  const std::string& tine() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tine(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tine();
  PROTOBUF_NODISCARD std::string* release_tine();
  void set_allocated_tine(std::string* tine);
  private:
  const std::string& _internal_tine() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tine(const std::string& value);
  std::string* _internal_mutable_tine();
  public:

  // @@protoc_insertion_point(class_scope:chat.GroupChatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_member_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tine_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_5fchat_2eproto;
};
// -------------------------------------------------------------------

class GroupNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.GroupNotification) */ {
 public:
  inline GroupNotification() : GroupNotification(nullptr) {}
  ~GroupNotification() override;
  explicit PROTOBUF_CONSTEXPR GroupNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupNotification(const GroupNotification& from);
  GroupNotification(GroupNotification&& from) noexcept
    : GroupNotification() {
    *this = ::std::move(from);
  }

  inline GroupNotification& operator=(const GroupNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupNotification& operator=(GroupNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupNotification* internal_default_instance() {
    return reinterpret_cast<const GroupNotification*>(
               &_GroupNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GroupNotification& a, GroupNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupNotification& from) {
    GroupNotification::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.GroupNotification";
  }
  protected:
  explicit GroupNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupNameFieldNumber = 1,
    kMemberNameFieldNumber = 2,
    kActionFieldNumber = 3,
  };
  // string group_name = 1;
  void clear_group_name();
  const std::string& group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_name();
  PROTOBUF_NODISCARD std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // string member_name = 2;
  void clear_member_name();
  const std::string& member_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_member_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_member_name();
  PROTOBUF_NODISCARD std::string* release_member_name();
  void set_allocated_member_name(std::string* member_name);
  private:
  const std::string& _internal_member_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_member_name(const std::string& value);
  std::string* _internal_mutable_member_name();
  public:

  // bool action = 3;
  void clear_action();
  bool action() const;
  void set_action(bool value);
  private:
  bool _internal_action() const;
  void _internal_set_action(bool value);
  public:

  // @@protoc_insertion_point(class_scope:chat.GroupNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr member_name_;
    bool action_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_5fchat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChatMessage

// string from_name = 1;
inline void ChatMessage::clear_from_name() {
  _impl_.from_name_.ClearToEmpty();
}
inline const std::string& ChatMessage::from_name() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.from_name)
  return _internal_from_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessage::set_from_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.from_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.ChatMessage.from_name)
}
inline std::string* ChatMessage::mutable_from_name() {
  std::string* _s = _internal_mutable_from_name();
  // @@protoc_insertion_point(field_mutable:chat.ChatMessage.from_name)
  return _s;
}
inline const std::string& ChatMessage::_internal_from_name() const {
  return _impl_.from_name_.Get();
}
inline void ChatMessage::_internal_set_from_name(const std::string& value) {
  
  _impl_.from_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMessage::_internal_mutable_from_name() {
  
  return _impl_.from_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatMessage::release_from_name() {
  // @@protoc_insertion_point(field_release:chat.ChatMessage.from_name)
  return _impl_.from_name_.Release();
}
inline void ChatMessage::set_allocated_from_name(std::string* from_name) {
  if (from_name != nullptr) {
    
  } else {
    
  }
  _impl_.from_name_.SetAllocated(from_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.from_name_.IsDefault()) {
    _impl_.from_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.ChatMessage.from_name)
}

// string to_name = 2;
inline void ChatMessage::clear_to_name() {
  _impl_.to_name_.ClearToEmpty();
}
inline const std::string& ChatMessage::to_name() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.to_name)
  return _internal_to_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessage::set_to_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.to_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.ChatMessage.to_name)
}
inline std::string* ChatMessage::mutable_to_name() {
  std::string* _s = _internal_mutable_to_name();
  // @@protoc_insertion_point(field_mutable:chat.ChatMessage.to_name)
  return _s;
}
inline const std::string& ChatMessage::_internal_to_name() const {
  return _impl_.to_name_.Get();
}
inline void ChatMessage::_internal_set_to_name(const std::string& value) {
  
  _impl_.to_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMessage::_internal_mutable_to_name() {
  
  return _impl_.to_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatMessage::release_to_name() {
  // @@protoc_insertion_point(field_release:chat.ChatMessage.to_name)
  return _impl_.to_name_.Release();
}
inline void ChatMessage::set_allocated_to_name(std::string* to_name) {
  if (to_name != nullptr) {
    
  } else {
    
  }
  _impl_.to_name_.SetAllocated(to_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.to_name_.IsDefault()) {
    _impl_.to_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.ChatMessage.to_name)
}

// string message = 3;
inline void ChatMessage::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ChatMessage::message() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessage::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.ChatMessage.message)
}
inline std::string* ChatMessage::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:chat.ChatMessage.message)
  return _s;
}
inline const std::string& ChatMessage::_internal_message() const {
  return _impl_.message_.Get();
}
inline void ChatMessage::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMessage::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatMessage::release_message() {
  // @@protoc_insertion_point(field_release:chat.ChatMessage.message)
  return _impl_.message_.Release();
}
inline void ChatMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.ChatMessage.message)
}

// string time = 4;
inline void ChatMessage::clear_time() {
  _impl_.time_.ClearToEmpty();
}
inline const std::string& ChatMessage::time() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.time)
  return _internal_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessage::set_time(ArgT0&& arg0, ArgT... args) {
 
 _impl_.time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.ChatMessage.time)
}
inline std::string* ChatMessage::mutable_time() {
  std::string* _s = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:chat.ChatMessage.time)
  return _s;
}
inline const std::string& ChatMessage::_internal_time() const {
  return _impl_.time_.Get();
}
inline void ChatMessage::_internal_set_time(const std::string& value) {
  
  _impl_.time_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMessage::_internal_mutable_time() {
  
  return _impl_.time_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatMessage::release_time() {
  // @@protoc_insertion_point(field_release:chat.ChatMessage.time)
  return _impl_.time_.Release();
}
inline void ChatMessage::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  _impl_.time_.SetAllocated(time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.time_.IsDefault()) {
    _impl_.time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.ChatMessage.time)
}

// -------------------------------------------------------------------

// GroupChatMessage

// string group_name = 1;
inline void GroupChatMessage::clear_group_name() {
  _impl_.group_name_.ClearToEmpty();
}
inline const std::string& GroupChatMessage::group_name() const {
  // @@protoc_insertion_point(field_get:chat.GroupChatMessage.group_name)
  return _internal_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupChatMessage::set_group_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.GroupChatMessage.group_name)
}
inline std::string* GroupChatMessage::mutable_group_name() {
  std::string* _s = _internal_mutable_group_name();
  // @@protoc_insertion_point(field_mutable:chat.GroupChatMessage.group_name)
  return _s;
}
inline const std::string& GroupChatMessage::_internal_group_name() const {
  return _impl_.group_name_.Get();
}
inline void GroupChatMessage::_internal_set_group_name(const std::string& value) {
  
  _impl_.group_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupChatMessage::_internal_mutable_group_name() {
  
  return _impl_.group_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupChatMessage::release_group_name() {
  // @@protoc_insertion_point(field_release:chat.GroupChatMessage.group_name)
  return _impl_.group_name_.Release();
}
inline void GroupChatMessage::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  _impl_.group_name_.SetAllocated(group_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_name_.IsDefault()) {
    _impl_.group_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.GroupChatMessage.group_name)
}

// string from_member = 2;
inline void GroupChatMessage::clear_from_member() {
  _impl_.from_member_.ClearToEmpty();
}
inline const std::string& GroupChatMessage::from_member() const {
  // @@protoc_insertion_point(field_get:chat.GroupChatMessage.from_member)
  return _internal_from_member();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupChatMessage::set_from_member(ArgT0&& arg0, ArgT... args) {
 
 _impl_.from_member_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.GroupChatMessage.from_member)
}
inline std::string* GroupChatMessage::mutable_from_member() {
  std::string* _s = _internal_mutable_from_member();
  // @@protoc_insertion_point(field_mutable:chat.GroupChatMessage.from_member)
  return _s;
}
inline const std::string& GroupChatMessage::_internal_from_member() const {
  return _impl_.from_member_.Get();
}
inline void GroupChatMessage::_internal_set_from_member(const std::string& value) {
  
  _impl_.from_member_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupChatMessage::_internal_mutable_from_member() {
  
  return _impl_.from_member_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupChatMessage::release_from_member() {
  // @@protoc_insertion_point(field_release:chat.GroupChatMessage.from_member)
  return _impl_.from_member_.Release();
}
inline void GroupChatMessage::set_allocated_from_member(std::string* from_member) {
  if (from_member != nullptr) {
    
  } else {
    
  }
  _impl_.from_member_.SetAllocated(from_member, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.from_member_.IsDefault()) {
    _impl_.from_member_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.GroupChatMessage.from_member)
}

// string message = 3;
inline void GroupChatMessage::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& GroupChatMessage::message() const {
  // @@protoc_insertion_point(field_get:chat.GroupChatMessage.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupChatMessage::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.GroupChatMessage.message)
}
inline std::string* GroupChatMessage::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:chat.GroupChatMessage.message)
  return _s;
}
inline const std::string& GroupChatMessage::_internal_message() const {
  return _impl_.message_.Get();
}
inline void GroupChatMessage::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupChatMessage::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupChatMessage::release_message() {
  // @@protoc_insertion_point(field_release:chat.GroupChatMessage.message)
  return _impl_.message_.Release();
}
inline void GroupChatMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.GroupChatMessage.message)
}

// string tine = 4;
inline void GroupChatMessage::clear_tine() {
  _impl_.tine_.ClearToEmpty();
}
inline const std::string& GroupChatMessage::tine() const {
  // @@protoc_insertion_point(field_get:chat.GroupChatMessage.tine)
  return _internal_tine();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupChatMessage::set_tine(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tine_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.GroupChatMessage.tine)
}
inline std::string* GroupChatMessage::mutable_tine() {
  std::string* _s = _internal_mutable_tine();
  // @@protoc_insertion_point(field_mutable:chat.GroupChatMessage.tine)
  return _s;
}
inline const std::string& GroupChatMessage::_internal_tine() const {
  return _impl_.tine_.Get();
}
inline void GroupChatMessage::_internal_set_tine(const std::string& value) {
  
  _impl_.tine_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupChatMessage::_internal_mutable_tine() {
  
  return _impl_.tine_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupChatMessage::release_tine() {
  // @@protoc_insertion_point(field_release:chat.GroupChatMessage.tine)
  return _impl_.tine_.Release();
}
inline void GroupChatMessage::set_allocated_tine(std::string* tine) {
  if (tine != nullptr) {
    
  } else {
    
  }
  _impl_.tine_.SetAllocated(tine, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tine_.IsDefault()) {
    _impl_.tine_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.GroupChatMessage.tine)
}

// -------------------------------------------------------------------

// GroupNotification

// string group_name = 1;
inline void GroupNotification::clear_group_name() {
  _impl_.group_name_.ClearToEmpty();
}
inline const std::string& GroupNotification::group_name() const {
  // @@protoc_insertion_point(field_get:chat.GroupNotification.group_name)
  return _internal_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupNotification::set_group_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.GroupNotification.group_name)
}
inline std::string* GroupNotification::mutable_group_name() {
  std::string* _s = _internal_mutable_group_name();
  // @@protoc_insertion_point(field_mutable:chat.GroupNotification.group_name)
  return _s;
}
inline const std::string& GroupNotification::_internal_group_name() const {
  return _impl_.group_name_.Get();
}
inline void GroupNotification::_internal_set_group_name(const std::string& value) {
  
  _impl_.group_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupNotification::_internal_mutable_group_name() {
  
  return _impl_.group_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupNotification::release_group_name() {
  // @@protoc_insertion_point(field_release:chat.GroupNotification.group_name)
  return _impl_.group_name_.Release();
}
inline void GroupNotification::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  _impl_.group_name_.SetAllocated(group_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_name_.IsDefault()) {
    _impl_.group_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.GroupNotification.group_name)
}

// string member_name = 2;
inline void GroupNotification::clear_member_name() {
  _impl_.member_name_.ClearToEmpty();
}
inline const std::string& GroupNotification::member_name() const {
  // @@protoc_insertion_point(field_get:chat.GroupNotification.member_name)
  return _internal_member_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupNotification::set_member_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.member_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.GroupNotification.member_name)
}
inline std::string* GroupNotification::mutable_member_name() {
  std::string* _s = _internal_mutable_member_name();
  // @@protoc_insertion_point(field_mutable:chat.GroupNotification.member_name)
  return _s;
}
inline const std::string& GroupNotification::_internal_member_name() const {
  return _impl_.member_name_.Get();
}
inline void GroupNotification::_internal_set_member_name(const std::string& value) {
  
  _impl_.member_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupNotification::_internal_mutable_member_name() {
  
  return _impl_.member_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupNotification::release_member_name() {
  // @@protoc_insertion_point(field_release:chat.GroupNotification.member_name)
  return _impl_.member_name_.Release();
}
inline void GroupNotification::set_allocated_member_name(std::string* member_name) {
  if (member_name != nullptr) {
    
  } else {
    
  }
  _impl_.member_name_.SetAllocated(member_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.member_name_.IsDefault()) {
    _impl_.member_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.GroupNotification.member_name)
}

// bool action = 3;
inline void GroupNotification::clear_action() {
  _impl_.action_ = false;
}
inline bool GroupNotification::_internal_action() const {
  return _impl_.action_;
}
inline bool GroupNotification::action() const {
  // @@protoc_insertion_point(field_get:chat.GroupNotification.action)
  return _internal_action();
}
inline void GroupNotification::_internal_set_action(bool value) {
  
  _impl_.action_ = value;
}
inline void GroupNotification::set_action(bool value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:chat.GroupNotification.action)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_user_5fchat_2eproto
