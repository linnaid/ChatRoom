// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_friends.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_user_5ffriends_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_user_5ffriends_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_user_5ffriends_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_user_5ffriends_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_user_5ffriends_2eproto;
namespace friends {
class AddFriendRequest;
struct AddFriendRequestDefaultTypeInternal;
extern AddFriendRequestDefaultTypeInternal _AddFriendRequest_default_instance_;
class AddFriendResponse;
struct AddFriendResponseDefaultTypeInternal;
extern AddFriendResponseDefaultTypeInternal _AddFriendResponse_default_instance_;
class FriendLists;
struct FriendListsDefaultTypeInternal;
extern FriendListsDefaultTypeInternal _FriendLists_default_instance_;
class FriendRequestNotification;
struct FriendRequestNotificationDefaultTypeInternal;
extern FriendRequestNotificationDefaultTypeInternal _FriendRequestNotification_default_instance_;
class FriendStatueRequest;
struct FriendStatueRequestDefaultTypeInternal;
extern FriendStatueRequestDefaultTypeInternal _FriendStatueRequest_default_instance_;
}  // namespace friends
PROTOBUF_NAMESPACE_OPEN
template<> ::friends::AddFriendRequest* Arena::CreateMaybeMessage<::friends::AddFriendRequest>(Arena*);
template<> ::friends::AddFriendResponse* Arena::CreateMaybeMessage<::friends::AddFriendResponse>(Arena*);
template<> ::friends::FriendLists* Arena::CreateMaybeMessage<::friends::FriendLists>(Arena*);
template<> ::friends::FriendRequestNotification* Arena::CreateMaybeMessage<::friends::FriendRequestNotification>(Arena*);
template<> ::friends::FriendStatueRequest* Arena::CreateMaybeMessage<::friends::FriendStatueRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace friends {

enum Statues_line : int {
  OFFLINE = 0,
  ONLINE = 1,
  BUSY = 2,
  Statues_line_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Statues_line_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Statues_line_IsValid(int value);
constexpr Statues_line Statues_line_MIN = OFFLINE;
constexpr Statues_line Statues_line_MAX = BUSY;
constexpr int Statues_line_ARRAYSIZE = Statues_line_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Statues_line_descriptor();
template<typename T>
inline const std::string& Statues_line_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Statues_line>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Statues_line_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Statues_line_descriptor(), enum_t_value);
}
inline bool Statues_line_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Statues_line* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Statues_line>(
    Statues_line_descriptor(), name, value);
}
enum Statues_friend : int {
  WAITING = 0,
  ACCEPT = 1,
  REJECT = 2,
  Statues_friend_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Statues_friend_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Statues_friend_IsValid(int value);
constexpr Statues_friend Statues_friend_MIN = WAITING;
constexpr Statues_friend Statues_friend_MAX = REJECT;
constexpr int Statues_friend_ARRAYSIZE = Statues_friend_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Statues_friend_descriptor();
template<typename T>
inline const std::string& Statues_friend_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Statues_friend>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Statues_friend_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Statues_friend_descriptor(), enum_t_value);
}
inline bool Statues_friend_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Statues_friend* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Statues_friend>(
    Statues_friend_descriptor(), name, value);
}
// ===================================================================

class AddFriendRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:friends.AddFriendRequest) */ {
 public:
  inline AddFriendRequest() : AddFriendRequest(nullptr) {}
  ~AddFriendRequest() override;
  explicit PROTOBUF_CONSTEXPR AddFriendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddFriendRequest(const AddFriendRequest& from);
  AddFriendRequest(AddFriendRequest&& from) noexcept
    : AddFriendRequest() {
    *this = ::std::move(from);
  }

  inline AddFriendRequest& operator=(const AddFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriendRequest& operator=(AddFriendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddFriendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddFriendRequest* internal_default_instance() {
    return reinterpret_cast<const AddFriendRequest*>(
               &_AddFriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddFriendRequest& a, AddFriendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFriendRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFriendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddFriendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddFriendRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddFriendRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddFriendRequest& from) {
    AddFriendRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFriendRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "friends.AddFriendRequest";
  }
  protected:
  explicit AddFriendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromUsernameFieldNumber = 1,
    kToUsernameFieldNumber = 2,
  };
  // string from_username = 1;
  void clear_from_username();
  const std::string& from_username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from_username();
  PROTOBUF_NODISCARD std::string* release_from_username();
  void set_allocated_from_username(std::string* from_username);
  private:
  const std::string& _internal_from_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from_username(const std::string& value);
  std::string* _internal_mutable_from_username();
  public:

  // string to_username = 2;
  void clear_to_username();
  const std::string& to_username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_username();
  PROTOBUF_NODISCARD std::string* release_to_username();
  void set_allocated_to_username(std::string* to_username);
  private:
  const std::string& _internal_to_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_username(const std::string& value);
  std::string* _internal_mutable_to_username();
  public:

  // @@protoc_insertion_point(class_scope:friends.AddFriendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_username_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class AddFriendResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:friends.AddFriendResponse) */ {
 public:
  inline AddFriendResponse() : AddFriendResponse(nullptr) {}
  ~AddFriendResponse() override;
  explicit PROTOBUF_CONSTEXPR AddFriendResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddFriendResponse(const AddFriendResponse& from);
  AddFriendResponse(AddFriendResponse&& from) noexcept
    : AddFriendResponse() {
    *this = ::std::move(from);
  }

  inline AddFriendResponse& operator=(const AddFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriendResponse& operator=(AddFriendResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddFriendResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddFriendResponse* internal_default_instance() {
    return reinterpret_cast<const AddFriendResponse*>(
               &_AddFriendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddFriendResponse& a, AddFriendResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFriendResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFriendResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddFriendResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddFriendResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddFriendResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddFriendResponse& from) {
    AddFriendResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFriendResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "friends.AddFriendResponse";
  }
  protected:
  explicit AddFriendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kDecideFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool decide = 1;
  void clear_decide();
  bool decide() const;
  void set_decide(bool value);
  private:
  bool _internal_decide() const;
  void _internal_set_decide(bool value);
  public:

  // @@protoc_insertion_point(class_scope:friends.AddFriendResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    bool decide_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class FriendLists final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:friends.FriendLists) */ {
 public:
  inline FriendLists() : FriendLists(nullptr) {}
  ~FriendLists() override;
  explicit PROTOBUF_CONSTEXPR FriendLists(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendLists(const FriendLists& from);
  FriendLists(FriendLists&& from) noexcept
    : FriendLists() {
    *this = ::std::move(from);
  }

  inline FriendLists& operator=(const FriendLists& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendLists& operator=(FriendLists&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendLists& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendLists* internal_default_instance() {
    return reinterpret_cast<const FriendLists*>(
               &_FriendLists_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FriendLists& a, FriendLists& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendLists* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendLists* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendLists* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendLists>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendLists& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FriendLists& from) {
    FriendLists::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendLists* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "friends.FriendLists";
  }
  protected:
  explicit FriendLists(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendNameFieldNumber = 1,
  };
  // repeated string friend_name = 1;
  int friend_name_size() const;
  private:
  int _internal_friend_name_size() const;
  public:
  void clear_friend_name();
  const std::string& friend_name(int index) const;
  std::string* mutable_friend_name(int index);
  void set_friend_name(int index, const std::string& value);
  void set_friend_name(int index, std::string&& value);
  void set_friend_name(int index, const char* value);
  void set_friend_name(int index, const char* value, size_t size);
  std::string* add_friend_name();
  void add_friend_name(const std::string& value);
  void add_friend_name(std::string&& value);
  void add_friend_name(const char* value);
  void add_friend_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& friend_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_friend_name();
  private:
  const std::string& _internal_friend_name(int index) const;
  std::string* _internal_add_friend_name();
  public:

  // @@protoc_insertion_point(class_scope:friends.FriendLists)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> friend_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class FriendStatueRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:friends.FriendStatueRequest) */ {
 public:
  inline FriendStatueRequest() : FriendStatueRequest(nullptr) {}
  ~FriendStatueRequest() override;
  explicit PROTOBUF_CONSTEXPR FriendStatueRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendStatueRequest(const FriendStatueRequest& from);
  FriendStatueRequest(FriendStatueRequest&& from) noexcept
    : FriendStatueRequest() {
    *this = ::std::move(from);
  }

  inline FriendStatueRequest& operator=(const FriendStatueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendStatueRequest& operator=(FriendStatueRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendStatueRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendStatueRequest* internal_default_instance() {
    return reinterpret_cast<const FriendStatueRequest*>(
               &_FriendStatueRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FriendStatueRequest& a, FriendStatueRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendStatueRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendStatueRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendStatueRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendStatueRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendStatueRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FriendStatueRequest& from) {
    FriendStatueRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendStatueRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "friends.FriendStatueRequest";
  }
  protected:
  explicit FriendStatueRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendNameFieldNumber = 1,
    kStatueFieldNumber = 2,
  };
  // string friend_name = 1;
  void clear_friend_name();
  const std::string& friend_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_friend_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_friend_name();
  PROTOBUF_NODISCARD std::string* release_friend_name();
  void set_allocated_friend_name(std::string* friend_name);
  private:
  const std::string& _internal_friend_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_friend_name(const std::string& value);
  std::string* _internal_mutable_friend_name();
  public:

  // .friends.Statues_line statue = 2;
  void clear_statue();
  ::friends::Statues_line statue() const;
  void set_statue(::friends::Statues_line value);
  private:
  ::friends::Statues_line _internal_statue() const;
  void _internal_set_statue(::friends::Statues_line value);
  public:

  // @@protoc_insertion_point(class_scope:friends.FriendStatueRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friend_name_;
    int statue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class FriendRequestNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:friends.FriendRequestNotification) */ {
 public:
  inline FriendRequestNotification() : FriendRequestNotification(nullptr) {}
  ~FriendRequestNotification() override;
  explicit PROTOBUF_CONSTEXPR FriendRequestNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendRequestNotification(const FriendRequestNotification& from);
  FriendRequestNotification(FriendRequestNotification&& from) noexcept
    : FriendRequestNotification() {
    *this = ::std::move(from);
  }

  inline FriendRequestNotification& operator=(const FriendRequestNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendRequestNotification& operator=(FriendRequestNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendRequestNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendRequestNotification* internal_default_instance() {
    return reinterpret_cast<const FriendRequestNotification*>(
               &_FriendRequestNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FriendRequestNotification& a, FriendRequestNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendRequestNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendRequestNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendRequestNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendRequestNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendRequestNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FriendRequestNotification& from) {
    FriendRequestNotification::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendRequestNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "friends.FriendRequestNotification";
  }
  protected:
  explicit FriendRequestNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromUsernameFieldNumber = 1,
    kToUsernameFieldNumber = 2,
    kStatueFieldNumber = 3,
  };
  // string from_username = 1;
  void clear_from_username();
  const std::string& from_username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from_username();
  PROTOBUF_NODISCARD std::string* release_from_username();
  void set_allocated_from_username(std::string* from_username);
  private:
  const std::string& _internal_from_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from_username(const std::string& value);
  std::string* _internal_mutable_from_username();
  public:

  // string to_username = 2;
  void clear_to_username();
  const std::string& to_username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_username();
  PROTOBUF_NODISCARD std::string* release_to_username();
  void set_allocated_to_username(std::string* to_username);
  private:
  const std::string& _internal_to_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_username(const std::string& value);
  std::string* _internal_mutable_to_username();
  public:

  // .friends.Statues_friend statue = 3;
  void clear_statue();
  ::friends::Statues_friend statue() const;
  void set_statue(::friends::Statues_friend value);
  private:
  ::friends::Statues_friend _internal_statue() const;
  void _internal_set_statue(::friends::Statues_friend value);
  public:

  // @@protoc_insertion_point(class_scope:friends.FriendRequestNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_username_;
    int statue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_5ffriends_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddFriendRequest

// string from_username = 1;
inline void AddFriendRequest::clear_from_username() {
  _impl_.from_username_.ClearToEmpty();
}
inline const std::string& AddFriendRequest::from_username() const {
  // @@protoc_insertion_point(field_get:friends.AddFriendRequest.from_username)
  return _internal_from_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddFriendRequest::set_from_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.from_username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:friends.AddFriendRequest.from_username)
}
inline std::string* AddFriendRequest::mutable_from_username() {
  std::string* _s = _internal_mutable_from_username();
  // @@protoc_insertion_point(field_mutable:friends.AddFriendRequest.from_username)
  return _s;
}
inline const std::string& AddFriendRequest::_internal_from_username() const {
  return _impl_.from_username_.Get();
}
inline void AddFriendRequest::_internal_set_from_username(const std::string& value) {
  
  _impl_.from_username_.Set(value, GetArenaForAllocation());
}
inline std::string* AddFriendRequest::_internal_mutable_from_username() {
  
  return _impl_.from_username_.Mutable(GetArenaForAllocation());
}
inline std::string* AddFriendRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:friends.AddFriendRequest.from_username)
  return _impl_.from_username_.Release();
}
inline void AddFriendRequest::set_allocated_from_username(std::string* from_username) {
  if (from_username != nullptr) {
    
  } else {
    
  }
  _impl_.from_username_.SetAllocated(from_username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.from_username_.IsDefault()) {
    _impl_.from_username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:friends.AddFriendRequest.from_username)
}

// string to_username = 2;
inline void AddFriendRequest::clear_to_username() {
  _impl_.to_username_.ClearToEmpty();
}
inline const std::string& AddFriendRequest::to_username() const {
  // @@protoc_insertion_point(field_get:friends.AddFriendRequest.to_username)
  return _internal_to_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddFriendRequest::set_to_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.to_username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:friends.AddFriendRequest.to_username)
}
inline std::string* AddFriendRequest::mutable_to_username() {
  std::string* _s = _internal_mutable_to_username();
  // @@protoc_insertion_point(field_mutable:friends.AddFriendRequest.to_username)
  return _s;
}
inline const std::string& AddFriendRequest::_internal_to_username() const {
  return _impl_.to_username_.Get();
}
inline void AddFriendRequest::_internal_set_to_username(const std::string& value) {
  
  _impl_.to_username_.Set(value, GetArenaForAllocation());
}
inline std::string* AddFriendRequest::_internal_mutable_to_username() {
  
  return _impl_.to_username_.Mutable(GetArenaForAllocation());
}
inline std::string* AddFriendRequest::release_to_username() {
  // @@protoc_insertion_point(field_release:friends.AddFriendRequest.to_username)
  return _impl_.to_username_.Release();
}
inline void AddFriendRequest::set_allocated_to_username(std::string* to_username) {
  if (to_username != nullptr) {
    
  } else {
    
  }
  _impl_.to_username_.SetAllocated(to_username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.to_username_.IsDefault()) {
    _impl_.to_username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:friends.AddFriendRequest.to_username)
}

// -------------------------------------------------------------------

// AddFriendResponse

// bool decide = 1;
inline void AddFriendResponse::clear_decide() {
  _impl_.decide_ = false;
}
inline bool AddFriendResponse::_internal_decide() const {
  return _impl_.decide_;
}
inline bool AddFriendResponse::decide() const {
  // @@protoc_insertion_point(field_get:friends.AddFriendResponse.decide)
  return _internal_decide();
}
inline void AddFriendResponse::_internal_set_decide(bool value) {
  
  _impl_.decide_ = value;
}
inline void AddFriendResponse::set_decide(bool value) {
  _internal_set_decide(value);
  // @@protoc_insertion_point(field_set:friends.AddFriendResponse.decide)
}

// string message = 2;
inline void AddFriendResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& AddFriendResponse::message() const {
  // @@protoc_insertion_point(field_get:friends.AddFriendResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddFriendResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:friends.AddFriendResponse.message)
}
inline std::string* AddFriendResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:friends.AddFriendResponse.message)
  return _s;
}
inline const std::string& AddFriendResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void AddFriendResponse::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* AddFriendResponse::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* AddFriendResponse::release_message() {
  // @@protoc_insertion_point(field_release:friends.AddFriendResponse.message)
  return _impl_.message_.Release();
}
inline void AddFriendResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:friends.AddFriendResponse.message)
}

// -------------------------------------------------------------------

// FriendLists

// repeated string friend_name = 1;
inline int FriendLists::_internal_friend_name_size() const {
  return _impl_.friend_name_.size();
}
inline int FriendLists::friend_name_size() const {
  return _internal_friend_name_size();
}
inline void FriendLists::clear_friend_name() {
  _impl_.friend_name_.Clear();
}
inline std::string* FriendLists::add_friend_name() {
  std::string* _s = _internal_add_friend_name();
  // @@protoc_insertion_point(field_add_mutable:friends.FriendLists.friend_name)
  return _s;
}
inline const std::string& FriendLists::_internal_friend_name(int index) const {
  return _impl_.friend_name_.Get(index);
}
inline const std::string& FriendLists::friend_name(int index) const {
  // @@protoc_insertion_point(field_get:friends.FriendLists.friend_name)
  return _internal_friend_name(index);
}
inline std::string* FriendLists::mutable_friend_name(int index) {
  // @@protoc_insertion_point(field_mutable:friends.FriendLists.friend_name)
  return _impl_.friend_name_.Mutable(index);
}
inline void FriendLists::set_friend_name(int index, const std::string& value) {
  _impl_.friend_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:friends.FriendLists.friend_name)
}
inline void FriendLists::set_friend_name(int index, std::string&& value) {
  _impl_.friend_name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:friends.FriendLists.friend_name)
}
inline void FriendLists::set_friend_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.friend_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:friends.FriendLists.friend_name)
}
inline void FriendLists::set_friend_name(int index, const char* value, size_t size) {
  _impl_.friend_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:friends.FriendLists.friend_name)
}
inline std::string* FriendLists::_internal_add_friend_name() {
  return _impl_.friend_name_.Add();
}
inline void FriendLists::add_friend_name(const std::string& value) {
  _impl_.friend_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:friends.FriendLists.friend_name)
}
inline void FriendLists::add_friend_name(std::string&& value) {
  _impl_.friend_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:friends.FriendLists.friend_name)
}
inline void FriendLists::add_friend_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.friend_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:friends.FriendLists.friend_name)
}
inline void FriendLists::add_friend_name(const char* value, size_t size) {
  _impl_.friend_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:friends.FriendLists.friend_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FriendLists::friend_name() const {
  // @@protoc_insertion_point(field_list:friends.FriendLists.friend_name)
  return _impl_.friend_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FriendLists::mutable_friend_name() {
  // @@protoc_insertion_point(field_mutable_list:friends.FriendLists.friend_name)
  return &_impl_.friend_name_;
}

// -------------------------------------------------------------------

// FriendStatueRequest

// string friend_name = 1;
inline void FriendStatueRequest::clear_friend_name() {
  _impl_.friend_name_.ClearToEmpty();
}
inline const std::string& FriendStatueRequest::friend_name() const {
  // @@protoc_insertion_point(field_get:friends.FriendStatueRequest.friend_name)
  return _internal_friend_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendStatueRequest::set_friend_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.friend_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:friends.FriendStatueRequest.friend_name)
}
inline std::string* FriendStatueRequest::mutable_friend_name() {
  std::string* _s = _internal_mutable_friend_name();
  // @@protoc_insertion_point(field_mutable:friends.FriendStatueRequest.friend_name)
  return _s;
}
inline const std::string& FriendStatueRequest::_internal_friend_name() const {
  return _impl_.friend_name_.Get();
}
inline void FriendStatueRequest::_internal_set_friend_name(const std::string& value) {
  
  _impl_.friend_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendStatueRequest::_internal_mutable_friend_name() {
  
  return _impl_.friend_name_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendStatueRequest::release_friend_name() {
  // @@protoc_insertion_point(field_release:friends.FriendStatueRequest.friend_name)
  return _impl_.friend_name_.Release();
}
inline void FriendStatueRequest::set_allocated_friend_name(std::string* friend_name) {
  if (friend_name != nullptr) {
    
  } else {
    
  }
  _impl_.friend_name_.SetAllocated(friend_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.friend_name_.IsDefault()) {
    _impl_.friend_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:friends.FriendStatueRequest.friend_name)
}

// .friends.Statues_line statue = 2;
inline void FriendStatueRequest::clear_statue() {
  _impl_.statue_ = 0;
}
inline ::friends::Statues_line FriendStatueRequest::_internal_statue() const {
  return static_cast< ::friends::Statues_line >(_impl_.statue_);
}
inline ::friends::Statues_line FriendStatueRequest::statue() const {
  // @@protoc_insertion_point(field_get:friends.FriendStatueRequest.statue)
  return _internal_statue();
}
inline void FriendStatueRequest::_internal_set_statue(::friends::Statues_line value) {
  
  _impl_.statue_ = value;
}
inline void FriendStatueRequest::set_statue(::friends::Statues_line value) {
  _internal_set_statue(value);
  // @@protoc_insertion_point(field_set:friends.FriendStatueRequest.statue)
}

// -------------------------------------------------------------------

// FriendRequestNotification

// string from_username = 1;
inline void FriendRequestNotification::clear_from_username() {
  _impl_.from_username_.ClearToEmpty();
}
inline const std::string& FriendRequestNotification::from_username() const {
  // @@protoc_insertion_point(field_get:friends.FriendRequestNotification.from_username)
  return _internal_from_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendRequestNotification::set_from_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.from_username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:friends.FriendRequestNotification.from_username)
}
inline std::string* FriendRequestNotification::mutable_from_username() {
  std::string* _s = _internal_mutable_from_username();
  // @@protoc_insertion_point(field_mutable:friends.FriendRequestNotification.from_username)
  return _s;
}
inline const std::string& FriendRequestNotification::_internal_from_username() const {
  return _impl_.from_username_.Get();
}
inline void FriendRequestNotification::_internal_set_from_username(const std::string& value) {
  
  _impl_.from_username_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendRequestNotification::_internal_mutable_from_username() {
  
  return _impl_.from_username_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendRequestNotification::release_from_username() {
  // @@protoc_insertion_point(field_release:friends.FriendRequestNotification.from_username)
  return _impl_.from_username_.Release();
}
inline void FriendRequestNotification::set_allocated_from_username(std::string* from_username) {
  if (from_username != nullptr) {
    
  } else {
    
  }
  _impl_.from_username_.SetAllocated(from_username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.from_username_.IsDefault()) {
    _impl_.from_username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:friends.FriendRequestNotification.from_username)
}

// string to_username = 2;
inline void FriendRequestNotification::clear_to_username() {
  _impl_.to_username_.ClearToEmpty();
}
inline const std::string& FriendRequestNotification::to_username() const {
  // @@protoc_insertion_point(field_get:friends.FriendRequestNotification.to_username)
  return _internal_to_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendRequestNotification::set_to_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.to_username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:friends.FriendRequestNotification.to_username)
}
inline std::string* FriendRequestNotification::mutable_to_username() {
  std::string* _s = _internal_mutable_to_username();
  // @@protoc_insertion_point(field_mutable:friends.FriendRequestNotification.to_username)
  return _s;
}
inline const std::string& FriendRequestNotification::_internal_to_username() const {
  return _impl_.to_username_.Get();
}
inline void FriendRequestNotification::_internal_set_to_username(const std::string& value) {
  
  _impl_.to_username_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendRequestNotification::_internal_mutable_to_username() {
  
  return _impl_.to_username_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendRequestNotification::release_to_username() {
  // @@protoc_insertion_point(field_release:friends.FriendRequestNotification.to_username)
  return _impl_.to_username_.Release();
}
inline void FriendRequestNotification::set_allocated_to_username(std::string* to_username) {
  if (to_username != nullptr) {
    
  } else {
    
  }
  _impl_.to_username_.SetAllocated(to_username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.to_username_.IsDefault()) {
    _impl_.to_username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:friends.FriendRequestNotification.to_username)
}

// .friends.Statues_friend statue = 3;
inline void FriendRequestNotification::clear_statue() {
  _impl_.statue_ = 0;
}
inline ::friends::Statues_friend FriendRequestNotification::_internal_statue() const {
  return static_cast< ::friends::Statues_friend >(_impl_.statue_);
}
inline ::friends::Statues_friend FriendRequestNotification::statue() const {
  // @@protoc_insertion_point(field_get:friends.FriendRequestNotification.statue)
  return _internal_statue();
}
inline void FriendRequestNotification::_internal_set_statue(::friends::Statues_friend value) {
  
  _impl_.statue_ = value;
}
inline void FriendRequestNotification::set_statue(::friends::Statues_friend value) {
  _internal_set_statue(value);
  // @@protoc_insertion_point(field_set:friends.FriendRequestNotification.statue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace friends

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::friends::Statues_line> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::friends::Statues_line>() {
  return ::friends::Statues_line_descriptor();
}
template <> struct is_proto_enum< ::friends::Statues_friend> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::friends::Statues_friend>() {
  return ::friends::Statues_friend_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_user_5ffriends_2eproto
