// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_friends.proto

#include "user_friends.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace friends {
PROTOBUF_CONSTEXPR AddFriendRequest::AddFriendRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.from_username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.to_username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddFriendRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddFriendRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddFriendRequestDefaultTypeInternal() {}
  union {
    AddFriendRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddFriendRequestDefaultTypeInternal _AddFriendRequest_default_instance_;
PROTOBUF_CONSTEXPR AddFriendResponse::AddFriendResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.decide_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddFriendResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddFriendResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddFriendResponseDefaultTypeInternal() {}
  union {
    AddFriendResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddFriendResponseDefaultTypeInternal _AddFriendResponse_default_instance_;
PROTOBUF_CONSTEXPR FriendLists::FriendLists(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.friend_name_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FriendListsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FriendListsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FriendListsDefaultTypeInternal() {}
  union {
    FriendLists _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FriendListsDefaultTypeInternal _FriendLists_default_instance_;
PROTOBUF_CONSTEXPR FriendStatueRequest::FriendStatueRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.friend_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.statue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FriendStatueRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FriendStatueRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FriendStatueRequestDefaultTypeInternal() {}
  union {
    FriendStatueRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FriendStatueRequestDefaultTypeInternal _FriendStatueRequest_default_instance_;
PROTOBUF_CONSTEXPR FriendRequestNotification::FriendRequestNotification(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.from_username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.to_username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.statue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FriendRequestNotificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FriendRequestNotificationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FriendRequestNotificationDefaultTypeInternal() {}
  union {
    FriendRequestNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FriendRequestNotificationDefaultTypeInternal _FriendRequestNotification_default_instance_;
}  // namespace friends
static ::_pb::Metadata file_level_metadata_user_5ffriends_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_user_5ffriends_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_user_5ffriends_2eproto = nullptr;

const uint32_t TableStruct_user_5ffriends_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::friends::AddFriendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::friends::AddFriendRequest, _impl_.from_username_),
  PROTOBUF_FIELD_OFFSET(::friends::AddFriendRequest, _impl_.to_username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::friends::AddFriendResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::friends::AddFriendResponse, _impl_.decide_),
  PROTOBUF_FIELD_OFFSET(::friends::AddFriendResponse, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::friends::FriendLists, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::friends::FriendLists, _impl_.friend_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::friends::FriendStatueRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::friends::FriendStatueRequest, _impl_.friend_name_),
  PROTOBUF_FIELD_OFFSET(::friends::FriendStatueRequest, _impl_.statue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::friends::FriendRequestNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::friends::FriendRequestNotification, _impl_.from_username_),
  PROTOBUF_FIELD_OFFSET(::friends::FriendRequestNotification, _impl_.to_username_),
  PROTOBUF_FIELD_OFFSET(::friends::FriendRequestNotification, _impl_.statue_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::friends::AddFriendRequest)},
  { 8, -1, -1, sizeof(::friends::AddFriendResponse)},
  { 16, -1, -1, sizeof(::friends::FriendLists)},
  { 23, -1, -1, sizeof(::friends::FriendStatueRequest)},
  { 31, -1, -1, sizeof(::friends::FriendRequestNotification)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::friends::_AddFriendRequest_default_instance_._instance,
  &::friends::_AddFriendResponse_default_instance_._instance,
  &::friends::_FriendLists_default_instance_._instance,
  &::friends::_FriendStatueRequest_default_instance_._instance,
  &::friends::_FriendRequestNotification_default_instance_._instance,
};

const char descriptor_table_protodef_user_5ffriends_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022user_friends.proto\022\007friends\">\n\020AddFrie"
  "ndRequest\022\025\n\rfrom_username\030\001 \001(\t\022\023\n\013to_u"
  "sername\030\002 \001(\t\"4\n\021AddFriendResponse\022\016\n\006de"
  "cide\030\001 \001(\010\022\017\n\007message\030\002 \001(\t\"\"\n\013FriendLis"
  "ts\022\023\n\013friend_name\030\001 \003(\t\"Q\n\023FriendStatueR"
  "equest\022\023\n\013friend_name\030\001 \001(\t\022%\n\006statue\030\002 "
  "\001(\0162\025.friends.Statues_line\"p\n\031FriendRequ"
  "estNotification\022\025\n\rfrom_username\030\001 \001(\t\022\023"
  "\n\013to_username\030\002 \001(\t\022\'\n\006statue\030\003 \001(\0162\027.fr"
  "iends.Statues_friend*1\n\014Statues_line\022\013\n\007"
  "OFFLINE\020\000\022\n\n\006ONLINE\020\001\022\010\n\004BUSY\020\002*5\n\016Statu"
  "es_friend\022\013\n\007WAITING\020\000\022\n\n\006ACCEPT\020\001\022\n\n\006RE"
  "JECT\020\002b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_user_5ffriends_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_user_5ffriends_2eproto = {
    false, false, 494, descriptor_table_protodef_user_5ffriends_2eproto,
    "user_friends.proto",
    &descriptor_table_user_5ffriends_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_user_5ffriends_2eproto::offsets,
    file_level_metadata_user_5ffriends_2eproto, file_level_enum_descriptors_user_5ffriends_2eproto,
    file_level_service_descriptors_user_5ffriends_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_user_5ffriends_2eproto_getter() {
  return &descriptor_table_user_5ffriends_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_user_5ffriends_2eproto(&descriptor_table_user_5ffriends_2eproto);
namespace friends {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Statues_line_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_user_5ffriends_2eproto);
  return file_level_enum_descriptors_user_5ffriends_2eproto[0];
}
bool Statues_line_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Statues_friend_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_user_5ffriends_2eproto);
  return file_level_enum_descriptors_user_5ffriends_2eproto[1];
}
bool Statues_friend_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class AddFriendRequest::_Internal {
 public:
};

AddFriendRequest::AddFriendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:friends.AddFriendRequest)
}
AddFriendRequest::AddFriendRequest(const AddFriendRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddFriendRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.from_username_){}
    , decltype(_impl_.to_username_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.from_username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_from_username().empty()) {
    _this->_impl_.from_username_.Set(from._internal_from_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.to_username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to_username().empty()) {
    _this->_impl_.to_username_.Set(from._internal_to_username(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:friends.AddFriendRequest)
}

inline void AddFriendRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.from_username_){}
    , decltype(_impl_.to_username_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.from_username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.to_username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddFriendRequest::~AddFriendRequest() {
  // @@protoc_insertion_point(destructor:friends.AddFriendRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddFriendRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.from_username_.Destroy();
  _impl_.to_username_.Destroy();
}

void AddFriendRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddFriendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:friends.AddFriendRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.from_username_.ClearToEmpty();
  _impl_.to_username_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddFriendRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string from_username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_from_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "friends.AddFriendRequest.from_username"));
        } else
          goto handle_unusual;
        continue;
      // string to_username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_to_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "friends.AddFriendRequest.to_username"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddFriendRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:friends.AddFriendRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_username = 1;
  if (!this->_internal_from_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from_username().data(), static_cast<int>(this->_internal_from_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "friends.AddFriendRequest.from_username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from_username(), target);
  }

  // string to_username = 2;
  if (!this->_internal_to_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_username().data(), static_cast<int>(this->_internal_to_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "friends.AddFriendRequest.to_username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_to_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:friends.AddFriendRequest)
  return target;
}

size_t AddFriendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:friends.AddFriendRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string from_username = 1;
  if (!this->_internal_from_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from_username());
  }

  // string to_username = 2;
  if (!this->_internal_to_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_username());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddFriendRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddFriendRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddFriendRequest::GetClassData() const { return &_class_data_; }


void AddFriendRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddFriendRequest*>(&to_msg);
  auto& from = static_cast<const AddFriendRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:friends.AddFriendRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_from_username().empty()) {
    _this->_internal_set_from_username(from._internal_from_username());
  }
  if (!from._internal_to_username().empty()) {
    _this->_internal_set_to_username(from._internal_to_username());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddFriendRequest::CopyFrom(const AddFriendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:friends.AddFriendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendRequest::IsInitialized() const {
  return true;
}

void AddFriendRequest::InternalSwap(AddFriendRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.from_username_, lhs_arena,
      &other->_impl_.from_username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_username_, lhs_arena,
      &other->_impl_.to_username_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AddFriendRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_5ffriends_2eproto_getter, &descriptor_table_user_5ffriends_2eproto_once,
      file_level_metadata_user_5ffriends_2eproto[0]);
}

// ===================================================================

class AddFriendResponse::_Internal {
 public:
};

AddFriendResponse::AddFriendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:friends.AddFriendResponse)
}
AddFriendResponse::AddFriendResponse(const AddFriendResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddFriendResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.decide_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.decide_ = from._impl_.decide_;
  // @@protoc_insertion_point(copy_constructor:friends.AddFriendResponse)
}

inline void AddFriendResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.decide_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddFriendResponse::~AddFriendResponse() {
  // @@protoc_insertion_point(destructor:friends.AddFriendResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddFriendResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void AddFriendResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddFriendResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:friends.AddFriendResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.decide_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddFriendResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool decide = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.decide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "friends.AddFriendResponse.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddFriendResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:friends.AddFriendResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool decide = 1;
  if (this->_internal_decide() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_decide(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "friends.AddFriendResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:friends.AddFriendResponse)
  return target;
}

size_t AddFriendResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:friends.AddFriendResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool decide = 1;
  if (this->_internal_decide() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddFriendResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddFriendResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddFriendResponse::GetClassData() const { return &_class_data_; }


void AddFriendResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddFriendResponse*>(&to_msg);
  auto& from = static_cast<const AddFriendResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:friends.AddFriendResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_decide() != 0) {
    _this->_internal_set_decide(from._internal_decide());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddFriendResponse::CopyFrom(const AddFriendResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:friends.AddFriendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendResponse::IsInitialized() const {
  return true;
}

void AddFriendResponse::InternalSwap(AddFriendResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.decide_, other->_impl_.decide_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddFriendResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_5ffriends_2eproto_getter, &descriptor_table_user_5ffriends_2eproto_once,
      file_level_metadata_user_5ffriends_2eproto[1]);
}

// ===================================================================

class FriendLists::_Internal {
 public:
};

FriendLists::FriendLists(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:friends.FriendLists)
}
FriendLists::FriendLists(const FriendLists& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FriendLists* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.friend_name_){from._impl_.friend_name_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:friends.FriendLists)
}

inline void FriendLists::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.friend_name_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FriendLists::~FriendLists() {
  // @@protoc_insertion_point(destructor:friends.FriendLists)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FriendLists::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.friend_name_.~RepeatedPtrField();
}

void FriendLists::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FriendLists::Clear() {
// @@protoc_insertion_point(message_clear_start:friends.FriendLists)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.friend_name_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendLists::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string friend_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_friend_name();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "friends.FriendLists.friend_name"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendLists::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:friends.FriendLists)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string friend_name = 1;
  for (int i = 0, n = this->_internal_friend_name_size(); i < n; i++) {
    const auto& s = this->_internal_friend_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "friends.FriendLists.friend_name");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:friends.FriendLists)
  return target;
}

size_t FriendLists::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:friends.FriendLists)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string friend_name = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.friend_name_.size());
  for (int i = 0, n = _impl_.friend_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.friend_name_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendLists::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FriendLists::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendLists::GetClassData() const { return &_class_data_; }


void FriendLists::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FriendLists*>(&to_msg);
  auto& from = static_cast<const FriendLists&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:friends.FriendLists)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.friend_name_.MergeFrom(from._impl_.friend_name_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendLists::CopyFrom(const FriendLists& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:friends.FriendLists)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendLists::IsInitialized() const {
  return true;
}

void FriendLists::InternalSwap(FriendLists* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.friend_name_.InternalSwap(&other->_impl_.friend_name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendLists::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_5ffriends_2eproto_getter, &descriptor_table_user_5ffriends_2eproto_once,
      file_level_metadata_user_5ffriends_2eproto[2]);
}

// ===================================================================

class FriendStatueRequest::_Internal {
 public:
};

FriendStatueRequest::FriendStatueRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:friends.FriendStatueRequest)
}
FriendStatueRequest::FriendStatueRequest(const FriendStatueRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FriendStatueRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.friend_name_){}
    , decltype(_impl_.statue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.friend_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.friend_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_friend_name().empty()) {
    _this->_impl_.friend_name_.Set(from._internal_friend_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.statue_ = from._impl_.statue_;
  // @@protoc_insertion_point(copy_constructor:friends.FriendStatueRequest)
}

inline void FriendStatueRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.friend_name_){}
    , decltype(_impl_.statue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.friend_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.friend_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FriendStatueRequest::~FriendStatueRequest() {
  // @@protoc_insertion_point(destructor:friends.FriendStatueRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FriendStatueRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.friend_name_.Destroy();
}

void FriendStatueRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FriendStatueRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:friends.FriendStatueRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.friend_name_.ClearToEmpty();
  _impl_.statue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendStatueRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string friend_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_friend_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "friends.FriendStatueRequest.friend_name"));
        } else
          goto handle_unusual;
        continue;
      // .friends.Statues_line statue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_statue(static_cast<::friends::Statues_line>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendStatueRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:friends.FriendStatueRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string friend_name = 1;
  if (!this->_internal_friend_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_friend_name().data(), static_cast<int>(this->_internal_friend_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "friends.FriendStatueRequest.friend_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_friend_name(), target);
  }

  // .friends.Statues_line statue = 2;
  if (this->_internal_statue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_statue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:friends.FriendStatueRequest)
  return target;
}

size_t FriendStatueRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:friends.FriendStatueRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string friend_name = 1;
  if (!this->_internal_friend_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_friend_name());
  }

  // .friends.Statues_line statue = 2;
  if (this->_internal_statue() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_statue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendStatueRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FriendStatueRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendStatueRequest::GetClassData() const { return &_class_data_; }


void FriendStatueRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FriendStatueRequest*>(&to_msg);
  auto& from = static_cast<const FriendStatueRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:friends.FriendStatueRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_friend_name().empty()) {
    _this->_internal_set_friend_name(from._internal_friend_name());
  }
  if (from._internal_statue() != 0) {
    _this->_internal_set_statue(from._internal_statue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendStatueRequest::CopyFrom(const FriendStatueRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:friends.FriendStatueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendStatueRequest::IsInitialized() const {
  return true;
}

void FriendStatueRequest::InternalSwap(FriendStatueRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.friend_name_, lhs_arena,
      &other->_impl_.friend_name_, rhs_arena
  );
  swap(_impl_.statue_, other->_impl_.statue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendStatueRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_5ffriends_2eproto_getter, &descriptor_table_user_5ffriends_2eproto_once,
      file_level_metadata_user_5ffriends_2eproto[3]);
}

// ===================================================================

class FriendRequestNotification::_Internal {
 public:
};

FriendRequestNotification::FriendRequestNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:friends.FriendRequestNotification)
}
FriendRequestNotification::FriendRequestNotification(const FriendRequestNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FriendRequestNotification* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.from_username_){}
    , decltype(_impl_.to_username_){}
    , decltype(_impl_.statue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.from_username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_from_username().empty()) {
    _this->_impl_.from_username_.Set(from._internal_from_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.to_username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to_username().empty()) {
    _this->_impl_.to_username_.Set(from._internal_to_username(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.statue_ = from._impl_.statue_;
  // @@protoc_insertion_point(copy_constructor:friends.FriendRequestNotification)
}

inline void FriendRequestNotification::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.from_username_){}
    , decltype(_impl_.to_username_){}
    , decltype(_impl_.statue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.from_username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.to_username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FriendRequestNotification::~FriendRequestNotification() {
  // @@protoc_insertion_point(destructor:friends.FriendRequestNotification)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FriendRequestNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.from_username_.Destroy();
  _impl_.to_username_.Destroy();
}

void FriendRequestNotification::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FriendRequestNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:friends.FriendRequestNotification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.from_username_.ClearToEmpty();
  _impl_.to_username_.ClearToEmpty();
  _impl_.statue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendRequestNotification::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string from_username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_from_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "friends.FriendRequestNotification.from_username"));
        } else
          goto handle_unusual;
        continue;
      // string to_username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_to_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "friends.FriendRequestNotification.to_username"));
        } else
          goto handle_unusual;
        continue;
      // .friends.Statues_friend statue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_statue(static_cast<::friends::Statues_friend>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendRequestNotification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:friends.FriendRequestNotification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_username = 1;
  if (!this->_internal_from_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from_username().data(), static_cast<int>(this->_internal_from_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "friends.FriendRequestNotification.from_username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from_username(), target);
  }

  // string to_username = 2;
  if (!this->_internal_to_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_username().data(), static_cast<int>(this->_internal_to_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "friends.FriendRequestNotification.to_username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_to_username(), target);
  }

  // .friends.Statues_friend statue = 3;
  if (this->_internal_statue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_statue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:friends.FriendRequestNotification)
  return target;
}

size_t FriendRequestNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:friends.FriendRequestNotification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string from_username = 1;
  if (!this->_internal_from_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from_username());
  }

  // string to_username = 2;
  if (!this->_internal_to_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_username());
  }

  // .friends.Statues_friend statue = 3;
  if (this->_internal_statue() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_statue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendRequestNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FriendRequestNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendRequestNotification::GetClassData() const { return &_class_data_; }


void FriendRequestNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FriendRequestNotification*>(&to_msg);
  auto& from = static_cast<const FriendRequestNotification&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:friends.FriendRequestNotification)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_from_username().empty()) {
    _this->_internal_set_from_username(from._internal_from_username());
  }
  if (!from._internal_to_username().empty()) {
    _this->_internal_set_to_username(from._internal_to_username());
  }
  if (from._internal_statue() != 0) {
    _this->_internal_set_statue(from._internal_statue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendRequestNotification::CopyFrom(const FriendRequestNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:friends.FriendRequestNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRequestNotification::IsInitialized() const {
  return true;
}

void FriendRequestNotification::InternalSwap(FriendRequestNotification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.from_username_, lhs_arena,
      &other->_impl_.from_username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_username_, lhs_arena,
      &other->_impl_.to_username_, rhs_arena
  );
  swap(_impl_.statue_, other->_impl_.statue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendRequestNotification::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_5ffriends_2eproto_getter, &descriptor_table_user_5ffriends_2eproto_once,
      file_level_metadata_user_5ffriends_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace friends
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::friends::AddFriendRequest*
Arena::CreateMaybeMessage< ::friends::AddFriendRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::friends::AddFriendRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::friends::AddFriendResponse*
Arena::CreateMaybeMessage< ::friends::AddFriendResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::friends::AddFriendResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::friends::FriendLists*
Arena::CreateMaybeMessage< ::friends::FriendLists >(Arena* arena) {
  return Arena::CreateMessageInternal< ::friends::FriendLists >(arena);
}
template<> PROTOBUF_NOINLINE ::friends::FriendStatueRequest*
Arena::CreateMaybeMessage< ::friends::FriendStatueRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::friends::FriendStatueRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::friends::FriendRequestNotification*
Arena::CreateMaybeMessage< ::friends::FriendRequestNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::friends::FriendRequestNotification >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
